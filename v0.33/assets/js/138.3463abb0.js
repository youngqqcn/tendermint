(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{733:function(e,t,v){"use strict";v.r(t);var _=v(1),o=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"methods"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),v("h2",{attrs:{id:"methods-existing-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#methods-existing-in-abci"}},[e._v("#")]),e._v(" Methods existing in ABCI")]),e._v(" "),v("h3",{attrs:{id:"echo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#echo"}},[e._v("#")]),e._v(" Echo")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Request")]),e._v(":\n"),v("ul",[v("li",[v("code",[e._v("Message (string)")]),e._v(": A string to echo back")])])]),e._v(" "),v("li",[v("strong",[e._v("Response")]),e._v(":\n"),v("ul",[v("li",[v("code",[e._v("Message (string)")]),e._v(": The input string")])])]),e._v(" "),v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("Echo a string to test an abci client/server implementation")])])])]),e._v(" "),v("h3",{attrs:{id:"flush"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flush"}},[e._v("#")]),e._v(" Flush")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("Signals that messages queued on the client should be flushed to\nthe server. It is called periodically by the client\nimplementation to ensure asynchronous requests are actually\nsent, and is called immediately to make a synchronous request,\nwhich returns when the Flush response comes back.")])])])]),e._v(" "),v("h3",{attrs:{id:"info"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#info"}},[e._v("#")]),e._v(" Info")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("version")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The Tendermint software semantic version")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("block_version")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The Tendermint Block Protocol version")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("p2p_version")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The Tendermint P2P Protocol version")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("abci_version")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The Tendermint ABCI semantic version")]),e._v(" "),v("td",[e._v("4")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Some arbitrary information")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("version")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The application software semantic version")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("app_version")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The application protocol version")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("last_block_height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Latest block for which the app has called Commit")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("last_block_app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Latest result of Commit")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Return information about the application state.")]),e._v(" "),v("li",[e._v("Used to sync Tendermint with the application during a handshake\nthat happens on startup.")]),e._v(" "),v("li",[e._v("The returned "),v("code",[e._v("app_version")]),e._v(" will be included in the Header of every block.")]),e._v(" "),v("li",[e._v("Tendermint expects "),v("code",[e._v("last_block_app_hash")]),e._v(" and "),v("code",[e._v("last_block_height")]),e._v(" to\nbe updated during "),v("code",[e._v("Commit")]),e._v(", ensuring that "),v("code",[e._v("Commit")]),e._v(" is never\ncalled twice for the same block height.")])])])]),e._v(" "),v("blockquote",[v("p",[e._v("Note: Semantic version is a reference to "),v("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning"),v("OutboundLink")],1),e._v(". Semantic versions in info will be displayed as X.X.x.")])]),e._v(" "),v("h3",{attrs:{id:"initchain"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#initchain"}},[e._v("#")]),e._v(" InitChain")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Genesis time")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("chain_id")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("ID of the blockchain.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_params")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Initial consensus-critical parameters.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Initial genesis validators, sorted by voting power.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("app_state_bytes")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Serialized initial application state. JSON bytes.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("initial_height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height of the initial block (typically "),v("code",[e._v("1")]),e._v(").")]),e._v(" "),v("td",[e._v("6")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("consensus_params")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Initial consensus-critical parameters (optional)")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Initial validator set (optional).")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Initial application hash.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Called once upon genesis.")]),e._v(" "),v("li",[e._v("If ResponseInitChain.Validators is empty, the initial validator set will be the RequestInitChain.Validators")]),e._v(" "),v("li",[e._v("If ResponseInitChain.Validators is not empty, it will be the initial\nvalidator set (regardless of what is in RequestInitChain.Validators).")]),e._v(" "),v("li",[e._v("This allows the app to decide if it wants to accept the initial validator\nset proposed by tendermint (ie. in the genesis file), or if it wants to use\na different one (perhaps computed based on some application specific\ninformation in the genesis file).")])])])]),e._v(" "),v("h3",{attrs:{id:"query"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[e._v("#")]),e._v(" Query")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Raw query bytes. Can be used with or in lieu of Path.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("path")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Path field of the request URI. Can be used with or in lieu of "),v("code",[e._v("data")]),e._v(". Apps MUST interpret "),v("code",[e._v("/store")]),e._v(" as a query by key on the underlying store. The key SHOULD be specified in the "),v("code",[e._v("data")]),e._v(" field. Apps SHOULD allow queries over specific types like "),v("code",[e._v("/accounts/...")]),e._v(" or "),v("code",[e._v("/votes/...")])]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The block height for which you want the query (default=0 returns data for the latest committed block). Note that this is the height of the block containing the application's Merkle root hash, which represents the state as it was after committing the block at Height-1")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("prove")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("Return Merkle proof with response if possible")]),e._v(" "),v("td",[e._v("4")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("code")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("Response code.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("log")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The output of the application's logger. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("info")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Additional information. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("index")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The index of the key in the tree.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("key")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The key of the matching data.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("value")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The value of the matching data.")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("proof_ops")]),e._v(" "),v("td",[v("a",{attrs:{href:"#proofops"}},[e._v("ProofOps")])]),e._v(" "),v("td",[e._v("Serialized proof for the value data, if requested, to be verified against the "),v("code",[e._v("app_hash")]),e._v(" for the given Height.")]),e._v(" "),v("td",[e._v("8")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The block height from which data was derived. Note that this is the height of the block containing the application's Merkle root hash, which represents the state as it was after committing the block at Height-1")]),e._v(" "),v("td",[e._v("9")])]),e._v(" "),v("tr",[v("td",[e._v("codespace")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Namespace for the "),v("code",[e._v("code")]),e._v(".")]),e._v(" "),v("td",[e._v("10")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Query for data from the application at current or past height.")]),e._v(" "),v("li",[e._v("Optionally return Merkle proof.")]),e._v(" "),v("li",[e._v("Merkle proof includes self-describing "),v("code",[e._v("type")]),e._v(" field to support many types\nof Merkle trees and encoding formats.")])])])]),e._v(" "),v("h3",{attrs:{id:"checktx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#checktx"}},[e._v("#")]),e._v(" CheckTx")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("tx")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The request transaction bytes")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("type")]),e._v(" "),v("td",[e._v("CheckTxType")]),e._v(" "),v("td",[e._v("One of "),v("code",[e._v("CheckTx_New")]),e._v(" or "),v("code",[e._v("CheckTx_Recheck")]),e._v(". "),v("code",[e._v("CheckTx_New")]),e._v(" is the default and means that a full check of the tranasaction is required. "),v("code",[e._v("CheckTx_Recheck")]),e._v(" types are used when the mempool is initiating a normal recheck of a transaction.")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("code")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("Response code.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Result bytes, if any.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("log")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The output of the application's logger. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("info")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Additional information. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("gas_wanted")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas requested for transaction.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("gas_used")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas consumed by transaction.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("events")]),e._v(" "),v("td",[e._v("repeated "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_basic_concepts_002_draft.html#events"}},[e._v("Event")])],1),e._v(" "),v("td",[e._v("Type & Key-Value events for indexing transactions (eg. by account).")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("codespace")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Namespace for the "),v("code",[e._v("code")]),e._v(".")]),e._v(" "),v("td",[e._v("8")])]),e._v(" "),v("tr",[v("td",[e._v("sender")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The transaction's sender (e.g. the signer)")]),e._v(" "),v("td",[e._v("9")])]),e._v(" "),v("tr",[v("td",[e._v("priority")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The transaction's priority (for mempool ordering)")]),e._v(" "),v("td",[e._v("10")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Technically optional - not involved in processing blocks.")]),e._v(" "),v("li",[e._v("Guardian of the mempool: every node runs "),v("code",[e._v("CheckTx")]),e._v(" before letting a\ntransaction into its local mempool.")]),e._v(" "),v("li",[e._v("The transaction may come from an external user or another node")]),e._v(" "),v("li",[v("code",[e._v("CheckTx")]),e._v(" validates the transaction against the current state of the application,\nfor example, checking signatures and account balances, but does not apply any\nof the state changes described in the transaction.\nnot running code in a virtual machine.")]),e._v(" "),v("li",[e._v("Transactions where "),v("code",[e._v("ResponseCheckTx.Code != 0")]),e._v(" will be rejected - they will not be broadcast to\nother nodes or included in a proposal block.")]),e._v(" "),v("li",[e._v("Tendermint attributes no other value to the response code")])])])]),e._v(" "),v("h3",{attrs:{id:"listsnapshots"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#listsnapshots"}},[e._v("#")]),e._v(" ListSnapshots")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody")]),e._v(" "),v("p",[e._v("Empty request asking the application for a list of snapshots.")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("snapshots")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#snapshot"}},[e._v("Snapshot")])]),e._v(" "),v("td",[e._v("List of local state snapshots.")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Used during state sync to discover available snapshots on peers.")]),e._v(" "),v("li",[e._v("See "),v("code",[e._v("Snapshot")]),e._v(" data type for details.")])])])]),e._v(" "),v("h3",{attrs:{id:"loadsnapshotchunk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loadsnapshotchunk"}},[e._v("#")]),e._v(" LoadSnapshotChunk")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The height of the snapshot the chunk belongs to.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("format")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The application-specific format of the snapshot the chunk belongs to.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("chunk")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The chunk index, starting from "),v("code",[e._v("0")]),e._v(" for the initial chunk.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("chunk")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The binary chunk contents, in an arbitray format. Chunk messages cannot be larger than 16 MB "),v("em",[e._v("including metadata")]),e._v(", so 10 MB is a good starting point.")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Used during state sync to retrieve snapshot chunks from peers.")])])])]),e._v(" "),v("h3",{attrs:{id:"offersnapshot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#offersnapshot"}},[e._v("#")]),e._v(" OfferSnapshot")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("snapshot")]),e._v(" "),v("td",[v("a",{attrs:{href:"#snapshot"}},[e._v("Snapshot")])]),e._v(" "),v("td",[e._v("The snapshot offered for restoration.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The light client-verified app hash for this height, from the blockchain.")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("result")]),e._v(" "),v("td",[v("a",{attrs:{href:"#result"}},[e._v("Result")])]),e._v(" "),v("td",[e._v("The result of the snapshot offer.")]),e._v(" "),v("td",[e._v("1")])])])])])]),e._v(" "),v("h4",{attrs:{id:"result"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#result"}},[e._v("#")]),e._v(" Result")]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"ICBlbnVtIFJlc3VsdCB7CiAgICBVTktOT1dOICAgICAgID0gMDsgIC8vIFVua25vd24gcmVzdWx0LCBhYm9ydCBhbGwgc25hcHNob3QgcmVzdG9yYXRpb24KICAgIEFDQ0VQVCAgICAgICAgPSAxOyAgLy8gU25hcHNob3QgaXMgYWNjZXB0ZWQsIHN0YXJ0IGFwcGx5aW5nIGNodW5rcy4KICAgIEFCT1JUICAgICAgICAgPSAyOyAgLy8gQWJvcnQgc25hcHNob3QgcmVzdG9yYXRpb24sIGFuZCBkb24ndCB0cnkgYW55IG90aGVyIHNuYXBzaG90cy4KICAgIFJFSkVDVCAgICAgICAgPSAzOyAgLy8gUmVqZWN0IHRoaXMgc3BlY2lmaWMgc25hcHNob3QsIHRyeSBvdGhlcnMuCiAgICBSRUpFQ1RfRk9STUFUID0gNDsgIC8vIFJlamVjdCBhbGwgc25hcHNob3RzIHdpdGggdGhpcyBgZm9ybWF0YCwgdHJ5IG90aGVycy4KICAgIFJFSkVDVF9TRU5ERVIgPSA1OyAgLy8gUmVqZWN0IGFsbCBzbmFwc2hvdHMgZnJvbSBhbGwgc2VuZGVycyBvZiB0aGlzIHNuYXBzaG90LCB0cnkgb3RoZXJzLgogIH0K"}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[v("code",[e._v("OfferSnapshot")]),e._v(" is called when bootstrapping a node using state sync. The application may\naccept or reject snapshots as appropriate. Upon accepting, Tendermint will retrieve and\napply snapshot chunks via "),v("code",[e._v("ApplySnapshotChunk")]),e._v(". The application may also choose to reject a\nsnapshot in the chunk response, in which case it should be prepared to accept further\n"),v("code",[e._v("OfferSnapshot")]),e._v(" calls.")]),e._v(" "),v("li",[e._v("Only "),v("code",[e._v("AppHash")]),e._v(" can be trusted, as it has been verified by the light client. Any other data\ncan be spoofed by adversaries, so applications should employ additional verification schemes\nto avoid denial-of-service attacks. The verified "),v("code",[e._v("AppHash")]),e._v(" is automatically checked against\nthe restored application at the end of snapshot restoration.")]),e._v(" "),v("li",[e._v("For more information, see the "),v("code",[e._v("Snapshot")]),e._v(" data type or the "),v("RouterLink",{attrs:{to:"/spec/p2p/messages/state-sync.html"}},[e._v("state sync section")]),e._v(".")],1)])])]),e._v(" "),v("h3",{attrs:{id:"applysnapshotchunk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#applysnapshotchunk"}},[e._v("#")]),e._v(" ApplySnapshotChunk")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("index")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The chunk index, starting from "),v("code",[e._v("0")]),e._v(". Tendermint applies chunks sequentially.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("chunk")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The binary chunk contents, as returned by "),v("code",[e._v("LoadSnapshotChunk")]),e._v(".")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("sender")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The P2P ID of the node who sent this chunk.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("result")]),e._v(" "),v("td",[e._v("Result  (see below)")]),e._v(" "),v("td",[e._v("The result of applying this chunk.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("refetch_chunks")]),e._v(" "),v("td",[e._v("repeated uint32")]),e._v(" "),v("td",[e._v("Refetch and reapply the given chunks, regardless of "),v("code",[e._v("result")]),e._v(". Only the listed chunks will be refetched, and reapplied in sequential order.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("reject_senders")]),e._v(" "),v("td",[e._v("repeated string")]),e._v(" "),v("td",[e._v("Reject the given P2P senders, regardless of "),v("code",[e._v("Result")]),e._v(". Any chunks already applied will not be refetched unless explicitly requested, but queued chunks from these senders will be discarded, and new chunks or other snapshots rejected.")]),e._v(" "),v("td",[e._v("3")])])])])])]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ICBlbnVtIFJlc3VsdCB7CiAgICBVTktOT1dOICAgICAgICAgPSAwOyAgLy8gVW5rbm93biByZXN1bHQsIGFib3J0IGFsbCBzbmFwc2hvdCByZXN0b3JhdGlvbgogICAgQUNDRVBUICAgICAgICAgID0gMTsgIC8vIFRoZSBjaHVuayB3YXMgYWNjZXB0ZWQuCiAgICBBQk9SVCAgICAgICAgICAgPSAyOyAgLy8gQWJvcnQgc25hcHNob3QgcmVzdG9yYXRpb24sIGFuZCBkb24ndCB0cnkgYW55IG90aGVyIHNuYXBzaG90cy4KICAgIFJFVFJZICAgICAgICAgICA9IDM7ICAvLyBSZWFwcGx5IHRoaXMgY2h1bmssIGNvbWJpbmUgd2l0aCBgUmVmZXRjaENodW5rc2AgYW5kIGBSZWplY3RTZW5kZXJzYCBhcyBhcHByb3ByaWF0ZS4KICAgIFJFVFJZX1NOQVBTSE9UICA9IDQ7ICAvLyBSZXN0YXJ0IHRoaXMgc25hcHNob3QgZnJvbSBgT2ZmZXJTbmFwc2hvdGAsIHJldXNpbmcgY2h1bmtzIHVubGVzcyBpbnN0cnVjdGVkIG90aGVyd2lzZS4KICAgIFJFSkVDVF9TTkFQU0hPVCA9IDU7ICAvLyBSZWplY3QgdGhpcyBzbmFwc2hvdCwgdHJ5IGEgZGlmZmVyZW50IG9uZS4KICB9Cg=="}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("The application can choose to refetch chunks and/or ban P2P peers as appropriate. Tendermint\nwill not do this unless instructed by the application.")]),e._v(" "),v("li",[e._v("The application may want to verify each chunk, e.g. by attaching chunk hashes in\n"),v("code",[e._v("Snapshot.Metadata")]),e._v(" and/or incrementally verifying contents against "),v("code",[e._v("AppHash")]),e._v(".")]),e._v(" "),v("li",[e._v("When all chunks have been accepted, Tendermint will make an ABCI "),v("code",[e._v("Info")]),e._v(" call to verify that\n"),v("code",[e._v("LastBlockAppHash")]),e._v(" and "),v("code",[e._v("LastBlockHeight")]),e._v(" matches the expected values, and record the\n"),v("code",[e._v("AppVersion")]),e._v(" in the node state. It then switches to fast sync or consensus and joins the\nnetwork.")]),e._v(" "),v("li",[e._v("If Tendermint is unable to retrieve the next chunk after some time (e.g. because no suitable\npeers are available), it will reject the snapshot and try a different one via "),v("code",[e._v("OfferSnapshot")]),e._v(".\nThe application should be prepared to reset and accept it or abort as appropriate.")])])])]),e._v(" "),v("h2",{attrs:{id:"new-methods-introduced-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#new-methods-introduced-in-abci"}},[e._v("#")]),e._v(" New methods introduced in ABCI++")]),e._v(" "),v("h3",{attrs:{id:"prepareproposal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#prepareproposal"}},[e._v("#")]),e._v(" PrepareProposal")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The block header's hash of the block to propose. Present for convenience (can be derived from the block header).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("header")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#header"}},[e._v("Header")])],1),e._v(" "),v("td",[e._v("The header of the block to propose.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("txs")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("Preliminary list of transactions that have been picked as part of the block to propose.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("last_commit_info")]),e._v(" "),v("td",[v("a",{attrs:{href:"#lastcommitinfo"}},[e._v("LastCommitInfo")])]),e._v(" "),v("td",[e._v("Info about the last commit, including the round, the validator list, and which ones signed the last block.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("byzantine_validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#evidence"}},[e._v("Evidence")])]),e._v(" "),v("td",[e._v("List of evidence of validators that acted maliciously.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("max_tx_bytes")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Currently configured maximum size in bytes taken by the modified transactions.")]),e._v(" "),v("td",[e._v("6")])])])])])]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("TODO")]),e._v(": Add the changes needed in LastCommitInfo for vote extensions")])]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("TODO")]),e._v(": DISCUSS: We need to make clear whether a proposer is also running the logic of a non-proposer node (in particular \"ProcessProposal\")\nFrom the App's perspective, they'll probably skip ProcessProposal")])]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("modified_tx")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("The Application sets it to true to denote it made changes to transactions")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tx_records")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#txrecord"}},[e._v("TxRecord")])]),e._v(" "),v("td",[e._v("Possibly modified list of transactions that have been picked as part of the proposed block.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The Merkle root hash of the application state.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("tx_results")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#txresult"}},[e._v("ExecTxResult")])]),e._v(" "),v("td",[e._v("List of structures containing the data resulting from executing the transactions")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("validator_updates")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Changes to validator set (set voting power to 0 to remove).")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_param_updates")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Changes to consensus-critical gas, size, and other parameters.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("app_signed_updates")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("Optional changes to the "),v("em",[e._v("app_signed")]),e._v(" part of vote extensions.")]),e._v(" "),v("td",[e._v("7")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Contains a preliminary block to be proposed, called "),v("em",[e._v("raw block")]),e._v(", which the Application can modify.")]),e._v(" "),v("li",[e._v("The first five parameters of "),v("code",[e._v("RequestPrepareProposal")]),e._v(" are the same as "),v("code",[e._v("RequestProcessProposal")]),e._v("\nand "),v("code",[e._v("RequestFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("The header contains the height, timestamp, and more - it exactly matches the\nTendermint block header.")]),e._v(" "),v("li",[e._v("The Application can modify the transactions received in "),v("code",[e._v("RequestPrepareProposal")]),e._v(" before sending\nthem in "),v("code",[e._v("ResponsePrepareProposal")]),e._v(". In that case, "),v("code",[e._v("ResponsePrepareProposal.modified_tx")]),e._v(" is set to true.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("ResponsePrepareProposal.modified_tx")]),e._v(" is false, then Tendermint will ignore the contents of\n"),v("code",[e._v("ResponsePrepareProposal.tx_records")]),e._v(".")]),e._v(" "),v("li",[e._v("If the Application modifies the transactions, the modified transactions MUST NOT exceed the configured maximum size,\ncontained in "),v("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(".")]),e._v(" "),v("li",[e._v("If the Application modifies the "),v("em",[e._v("app_signed")]),e._v(" part of vote extensions via "),v("code",[e._v("ResponsePrepareProposal.app_signed_updates")]),e._v(",\nthe new total size of those extensions cannot exceed their initial size.")]),e._v(" "),v("li",[e._v("The Application may choose to not modify the "),v("em",[e._v("app_signed")]),e._v(" part of vote extensions by leaving parameter\n"),v("code",[e._v("ResponsePrepareProposal.app_signed_updates")]),e._v(" empty.")]),e._v(" "),v("li",[e._v("In same-block execution mode, the Application must provide values for "),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.tx_results")]),e._v(", "),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(", as a result of fully executing the block.\n"),v("ul",[v("li",[e._v("The values for "),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", or\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(" may be empty. In this case, Tendermint will keep\nthe current values.")]),e._v(" "),v("li",[v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", triggered by block "),v("code",[e._v("H")]),e._v(", affect validation\nfor blocks "),v("code",[e._v("H+1")]),e._v(", and "),v("code",[e._v("H+2")]),e._v(". Heights following a validator update are affected in the following way:\n"),v("ul",[v("li",[v("code",[e._v("H")]),e._v(": "),v("code",[e._v("NextValidatorsHash")]),e._v(" includes the new "),v("code",[e._v("validator_updates")]),e._v(" value.")]),e._v(" "),v("li",[v("code",[e._v("H+1")]),e._v(": The validator set change takes effect and "),v("code",[e._v("ValidatorsHash")]),e._v(" is updated.")]),e._v(" "),v("li",[v("code",[e._v("H+2")]),e._v(": "),v("code",[e._v("last_commit_info")]),e._v(" is changed to include the altered validator set.")])])]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" returned for block "),v("code",[e._v("H")]),e._v(" apply to the consensus\nparams for block "),v("code",[e._v("H+1")]),e._v(" even if the change is agreed in block "),v("code",[e._v("H")]),e._v(".\nFor more information on the consensus parameters,\nsee the "),v("RouterLink",{attrs:{to:"/spec/abci/apps.html#consensus-parameters"}},[e._v("application spec entry on consensus parameters")]),e._v(".")],1),e._v(" "),v("li",[e._v("It is the responsibility of the Application to set the right value for "),v("em",[e._v("TimeoutPropose")]),e._v(" so that\nthe (synchronous) execution of the block does not cause other processes to prevote "),v("code",[e._v("nil")]),e._v(" because\ntheir propose timeout goes off.")])])]),e._v(" "),v("li",[e._v("In next-block execution mode, Tendermint will ignore parameters "),v("code",[e._v("ResponsePrepareProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("As a result of executing the prepared proposal, the Application may produce header events or transaction events.\nThe Application must keep those events until a block is decided and then pass them on to Tendermint via\n"),v("code",[e._v("ResponseFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("Likewise, in next-block execution mode, the Application must keep all responses to executing transactions\nuntil it can call "),v("code",[e._v("ResponseFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("The Application can change the transaction list via "),v("code",[e._v("ResponsePrepareProposal.tx_records")]),e._v(".\nSee "),v("a",{attrs:{href:"#txrecord"}},[e._v("TxRecord")]),e._v(" for further information on how to use it. Some notes:\n"),v("ul",[v("li",[e._v("To remove a transaction from the proposed block the Application "),v("em",[e._v("marks")]),e._v(' the transaction as\n"REMOVE". It does not remove it from the list. The transaction will also be removed from the mempool.')]),e._v(" "),v("li",[e._v("Removing a transaction from the list means it is too early to propose that transaction,\nso it will be excluded from the proposal but will stay in the mempool for later proposals.\nThe Application should be extra-careful, as abusing this feature may cause transactions to\nstay forever in the mempool.")]),e._v(" "),v("li",[e._v("The "),v("code",[e._v("new_hashes")]),e._v(' field, besides helping with mempool maintenance, helps Tendermint handle\nqueries such as "what happened with this Tx?", by answering "it was modified into these ones".')]),e._v(" "),v("li",[e._v("The Application "),v("em",[e._v("can")]),e._v(" reorder the transactions in the list.")])])]),e._v(" "),v("li",[e._v("As a sanity check, Tendermint will check the returned parameters for validity if the Application modified them.\nIn particular, "),v("code",[e._v("ResponsePrepareProposal.tx_records")]),e._v(" will be deemed invalid if\n"),v("ul",[v("li",[e._v("There is a duplicate transaction in the list.")]),e._v(" "),v("li",[e._v("The "),v("code",[e._v("new_hashes")]),e._v(" field contains a dangling reference to a non-existing transaction.")]),e._v(" "),v("li",[e._v('A new or modified transaction is marked as "TXUNMODIFIED" or "TXREMOVED".')]),e._v(" "),v("li",[e._v('An unmodified transaction is marked as "TXADDED".')]),e._v(" "),v("li",[e._v('A transaction is marked as "TXUNKNOWN".')])])]),e._v(" "),v("li",[e._v("If Tendermint's sanity checks on the parameters of "),v("code",[e._v("ResponsePrepareProposal")]),e._v(" fails, then it will drop the proposal\nand proceed to the next round (thus simulating a network loss/delay of the proposal).\n"),v("ul",[v("li",[v("strong",[e._v("TODO")]),e._v(": [From discussion with William] Another possibility here is to panic. What do folks think we should do here?")])])]),e._v(" "),v("li",[e._v("The implementation of "),v("code",[e._v("PrepareProposal")]),e._v(" can be non-deterministic.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-it"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-it"}},[e._v("#")]),e._v(" When does Tendermint call it?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" enters Tendermint consensus round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", in which "),v("em",[e._v("p")]),e._v(" is the proposer,\nand "),v("em",[e._v("p")]),e._v("'s "),v("em",[e._v("validValue")]),e._v(" is "),v("code",[e._v("nil")]),e._v(":")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v("'s Tendermint collects outstanding transactions from the mempool\n"),v("ul",[v("li",[e._v("The transactions will be collected in order of priority")]),e._v(" "),v("li",[e._v("Let $C$ the list of currently collected transactions")]),e._v(" "),v("li",[e._v("The collection stops when any of the following conditions are met\n"),v("ul",[v("li",[e._v("the mempool is empty")]),e._v(" "),v("li",[e._v("the total size of transactions $\\in C$ is greater than or equal to "),v("code",[e._v("consensusParams.block.max_bytes")])]),e._v(" "),v("li",[e._v("the sum of "),v("code",[e._v("GasWanted")]),e._v(" field of transactions $\\in C$ is greater than or equal to\n"),v("code",[e._v("consensusParams.block.max_gas")])])])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint creates a block header.")])])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestPrepareProposal")]),e._v(" with the newly generated block.\nThe call is synchronous: Tendermint's execution will block until the Application returns from the call.")]),e._v(" "),v("li",[e._v("The Application checks the block (header, transactions, commit info, evidences). Besides,\n"),v("ul",[v("li",[e._v("in same-block execution mode, the Application can (and should) provide "),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", or\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v('in "next-block execution" mode, '),v("em",[e._v("p")]),e._v("'s Tendermint will ignore the values for "),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("in both modes, the Application can manipulate transactions\n"),v("ul",[v("li",[e._v("leave transactions untouched - "),v("code",[e._v("TxAction = UNMODIFIED")])]),e._v(" "),v("li",[e._v("add new transactions (not previously in the mempool) - "),v("code",[e._v("TxAction = ADDED")])]),e._v(" "),v("li",[e._v("remove transactions (invalid) from the proposal and from the mempool - "),v("code",[e._v("TxAction = REMOVED")])]),e._v(" "),v("li",[e._v("remove transactions from the proposal but not from the mempool (effectively "),v("em",[e._v("delaying")]),e._v(" them) - the\nApplication removes the transaction from the list")]),e._v(" "),v("li",[e._v("modify transactions (e.g. aggregate them) - "),v("code",[e._v("TxAction = ADDED")]),e._v(" followed by "),v("code",[e._v("TxAction = REMOVED")])]),e._v(" "),v("li",[e._v("reorder transactions - the Application reorders transactions in the list")])])])])]),e._v(" "),v("li",[e._v("If the block is modified, the Application sets "),v("code",[e._v("ResponsePrepareProposal.modified")]),e._v(" to true,\nand includes the modified block in the return parameters (see the rules in section "),v("em",[e._v("Usage")]),e._v(").\nThe Application returns from the call.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint uses the (possibly) modified block as "),v("em",[e._v("p")]),e._v("'s proposal in round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(".")])]),e._v(" "),v("p",[e._v("Note that, if "),v("em",[e._v("p")]),e._v(" has a non-"),v("code",[e._v("nil")]),e._v(" "),v("em",[e._v("validValue")]),e._v(", Tendermint will use it as proposal and will not call "),v("code",[e._v("RequestPrepareProposal")]),e._v(".")]),e._v(" "),v("h3",{attrs:{id:"processproposal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#processproposal"}},[e._v("#")]),e._v(" ProcessProposal")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-2"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The block header's hash of the proposed block. Present for convenience (can be derived from the block header).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("header")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#header"}},[e._v("Header")])],1),e._v(" "),v("td",[e._v("The proposed block's header.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("txs")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("List of transactions that have been picked as part of the proposed block.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("last_commit_info")]),e._v(" "),v("td",[v("a",{attrs:{href:"#lastcommitinfo"}},[e._v("LastCommitInfo")])]),e._v(" "),v("td",[e._v("Info about the last commit, including the round , the validator list, and which ones signed the last block.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("byzantine_validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#evidence"}},[e._v("Evidence")])]),e._v(" "),v("td",[e._v("List of evidence of validators that acted maliciously.")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("accept")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("If false, the received block failed verification.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The Merkle root hash of the application state.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("tx_results")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#txresult"}},[e._v("ExecTxResult")])]),e._v(" "),v("td",[e._v("List of structures containing the data resulting from executing the transactions.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("validator_updates")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Changes to validator set (set voting power to 0 to remove).")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_param_updates")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Changes to consensus-critical gas, size, and other parameters.")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Contains a full proposed block.\n"),v("ul",[v("li",[e._v("The parameters and types of "),v("code",[e._v("RequestProcessProposal")]),e._v(" are the same as "),v("code",[e._v("RequestPrepareProposal")]),e._v("\nand "),v("code",[e._v("RequestFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("The Application may fully execute the block as though it was handling "),v("code",[e._v("RequestFinalizeBlock")]),e._v(".\nHowever, any resulting state changes must be kept as "),v("em",[e._v("canditade state")]),e._v(",\nand the Application should be ready to backtrack/discard it in case the decided block is different.")])])]),e._v(" "),v("li",[e._v("The header exactly matches the Tendermint header of the proposed block.\n"),v("ul",[v("li",[e._v("In next-block execution mode, the header hashes "),v("em",[e._v("AppHash")]),e._v(", "),v("em",[e._v("LastResultHash")]),e._v(", "),v("em",[e._v("ValidatorHash")]),e._v(",\nand "),v("em",[e._v("ConsensusHash")]),e._v(" refer to the "),v("strong",[e._v("last committed block")]),e._v(" (data was provided by the last call to\n"),v("code",[e._v("ResponseFinalizeBlock")]),e._v(").")]),e._v(" "),v("li",[e._v("In same-block execution mode, the header hashes "),v("em",[e._v("AppHash")]),e._v(", "),v("em",[e._v("LastResultHash")]),e._v(", "),v("em",[e._v("ValidatorHash")]),e._v(",\nand "),v("em",[e._v("ConsensusHash")]),e._v(" refer to the "),v("strong",[e._v("same")]),e._v(" block being passed in the "),v("code",[e._v("Request*")]),e._v(" call to this\nmethod (data was provided by the call to "),v("code",[e._v("ResponsePrepareProposal")]),e._v(" at the current height that\nresulted in the block being passed in the "),v("code",[e._v("Request*")]),e._v(" call to this method)")])])]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("ResponseProcessProposal.accept")]),e._v(" is "),v("em",[e._v("false")]),e._v(", Tendermint assumes the proposal received\nis not valid.")]),e._v(" "),v("li",[e._v("In same-block execution mode, the Application is required to fully execute the block and provide values\nfor parameters "),v("code",[e._v("ResponseProcessProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponseProcessProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponseProcessProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponseProcessProposal.consensus_param_updates")]),e._v(",\nso that Tendermint can then verify the hashes in the block's header are correct.\nIf the hashes mismatch, Tendermint will reject the block even if "),v("code",[e._v("ResponseProcessProposal.accept")]),e._v("\nwas set to "),v("em",[e._v("true")]),e._v(".")]),e._v(" "),v("li",[e._v("In next-block execution mode, the Application should "),v("em",[e._v("not")]),e._v(" provide values for parameters\n"),v("code",[e._v("ResponseProcessProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponseProcessProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponseProcessProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponseProcessProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("The implementation of "),v("code",[e._v("ProcessProposal")]),e._v(" MUST be deterministic. Moreover, the value of\n"),v("code",[e._v("ResponseProcessProposal.accept")]),e._v(" MUST "),v("strong",[e._v("exclusively")]),e._v(" depend on the parameters passed in\nthe call to "),v("code",[e._v("RequestProcessProposal")]),e._v(", and the last committed Application state\n(see "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_app_requirements_002_draft.html"}},[e._v("Requirements")]),e._v(" section).")],1),e._v(" "),v("li",[e._v("Moreover, application implementors SHOULD always set "),v("code",[e._v("ResponseProcessProposal.accept")]),e._v(" to "),v("em",[e._v("true")]),e._v(",\nunless they "),v("em",[e._v("really")]),e._v(" know what the potential liveness implications of returning "),v("em",[e._v("false")]),e._v(" are.")])])])]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("TODO")]),e._v(": should "),v("code",[e._v("ResponseProcessProposal.accept")]),e._v(" be of type "),v("code",[e._v("Result")]),e._v(" rather than "),v("code",[e._v("bool")]),e._v("? (so we are able to extend the possible values in the future?)")])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-it-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-it-2"}},[e._v("#")]),e._v(" When does Tendermint call it?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" enters Tendermint consensus round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", in which "),v("em",[e._v("q")]),e._v(" is the proposer (possibly "),v("em",[e._v("p")]),e._v(" = "),v("em",[e._v("q")]),e._v("):")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v(" sets up timer "),v("code",[e._v("ProposeTimeout")]),e._v(".")]),e._v(" "),v("li",[e._v("If "),v("em",[e._v("p")]),e._v(" is the proposer, "),v("em",[e._v("p")]),e._v(" executes steps 1-6 in "),v("a",{attrs:{href:"#prepareproposal"}},[e._v("PrepareProposal")]),e._v(".")]),e._v(" "),v("li",[e._v("Upon reception of Proposal message (which contains the header) for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(" from "),v("em",[e._v("q")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint verifies the block header.")]),e._v(" "),v("li",[e._v("Upon reception of Proposal message, along with all the block parts, for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(" from "),v("em",[e._v("q")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint follows its algorithm\nto check whether it should prevote for the block just received, or "),v("code",[e._v("nil")])]),e._v(" "),v("li",[e._v("If Tendermint should prevote for the block just received\n"),v("ol",[v("li",[e._v("Tendermint calls "),v("code",[e._v("RequestProcessProposal")]),e._v(" with the block. The call is synchronous.")]),e._v(" "),v("li",[e._v("The Application checks/processes the proposed block, which is read-only, and returns true ("),v("em",[e._v("accept")]),e._v(") or false ("),v("em",[e._v("reject")]),e._v(") in "),v("code",[e._v("ResponseProcessProposal.accept")]),e._v(".\n"),v("ul",[v("li",[e._v("The Application, depending on its needs, may call "),v("code",[e._v("ResponseProcessProposal")]),e._v(" "),v("ul",[v("li",[e._v("either after it has completely processed the block (the simpler case),")]),e._v(" "),v("li",[e._v("or immediately (after doing some basic checks), and process the block asynchronously. In this case the Application will\nnot be able to reject the block, or force prevote/precommit "),v("code",[e._v("nil")]),e._v(" afterwards.")])])])])]),e._v(" "),v("li",[e._v("If the returned value is\n"),v("ul",[v("li",[v("em",[e._v("accept")]),e._v(", Tendermint prevotes on this proposal for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("reject")]),e._v(", Tendermint prevotes "),v("code",[e._v("nil")]),e._v(".")])])])])])]),e._v(" "),v("h3",{attrs:{id:"extendvote"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#extendvote"}},[e._v("#")]),e._v(" ExtendVote")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-3"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The header hash of the proposed block that the vote extension is to refer to.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height of the proposed block (for sanity check).")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("app_signed")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Optional information signed by the Application (not by Tendermint).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tendermint_signed")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Optional information signed by Tendermint.")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Both "),v("code",[e._v("ResponseExtendVote.app_signed")]),e._v(" and "),v("code",[e._v("ResponseExtendVote.tendermint_signed")]),e._v(" are optional information that will\nbe attached to the Precommit message.")]),e._v(" "),v("li",[v("code",[e._v("RequestExtendVote.hash")]),e._v(" corresponds to the hash of a proposed block that was made available to the application\nin a previous call to "),v("code",[e._v("ProcessProposal")]),e._v(" or "),v("code",[e._v("PrepareProposal")]),e._v(" for the current height.")]),e._v(" "),v("li",[v("code",[e._v("ResponseExtendVote.app_signed")]),e._v(" and "),v("code",[e._v("ResponseExtendVote.tendermint_signed")]),e._v(" will always be attached to a non-"),v("code",[e._v("nil")]),e._v("\nPrecommit message. If Tendermint is to precommit "),v("code",[e._v("nil")]),e._v(", it will not call "),v("code",[e._v("RequestExtendVote")]),e._v(".")]),e._v(" "),v("li",[e._v("The Application logic that creates the extension can be non-deterministic.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-it-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-it-3"}},[e._v("#")]),e._v(" When does Tendermint call it?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" is in Tendermint consensus state "),v("em",[e._v("prevote")]),e._v(" of round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", in which "),v("em",[e._v("q")]),e._v(" is the proposer; and "),v("em",[e._v("p")]),e._v(" has received")]),e._v(" "),v("ul",[v("li",[e._v("the Proposal message "),v("em",[e._v("v")]),e._v(" for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", along with all the block parts, from "),v("em",[e._v("q")]),e._v(",")]),e._v(" "),v("li",[v("code",[e._v("Prevote")]),e._v(" messages from "),v("em",[e._v("2f + 1")]),e._v(" validators' voting power for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", prevoting for the same block "),v("em",[e._v("id(v)")]),e._v(",")])]),e._v(" "),v("p",[e._v("then "),v("em",[e._v("p")]),e._v("'s Tendermint locks "),v("em",[e._v("v")]),e._v("  and sends a Precommit message in the following way")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v("'s Tendermint sets "),v("em",[e._v("lockedValue")]),e._v(" and "),v("em",[e._v("validValue")]),e._v(" to "),v("em",[e._v("v")]),e._v(", and sets "),v("em",[e._v("lockedRound")]),e._v(" and "),v("em",[e._v("validRound")]),e._v(" to "),v("em",[e._v("r")])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestExtendVote")]),e._v(" with "),v("em",[e._v("id(v)")]),e._v(" ("),v("code",[e._v("RequestExtendVote.hash")]),e._v("). The call is synchronous.")]),e._v(" "),v("li",[e._v("The Application returns an array of bytes, "),v("code",[e._v("ResponseExtendVote.extension")]),e._v(", which is not interpreted by Tendermint.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint includes "),v("code",[e._v("ResponseExtendVote.extension")]),e._v(" as a new field in the Precommit message.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint signs and broadcasts the Precommit message.")])]),e._v(" "),v("p",[e._v("In the cases when "),v("em",[e._v("p")]),e._v("'s Tendermint is to broadcast "),v("code",[e._v("precommit nil")]),e._v(" messages (either "),v("em",[e._v("2f+1")]),e._v(" "),v("code",[e._v("prevote nil")]),e._v(" messages received, or "),v("em",[e._v("timeoutPrevote")]),e._v(" triggered), "),v("em",[e._v("p")]),e._v("'s Tendermint does "),v("strong",[e._v("not")]),e._v(" call "),v("code",[e._v("RequestExtendVote")]),e._v(" and will include an empty byte array as vote extension in the "),v("code",[e._v("precommit nil")]),e._v(" message.")]),e._v(" "),v("h3",{attrs:{id:"verifyvoteextension"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#verifyvoteextension"}},[e._v("#")]),e._v(" VerifyVoteExtension")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-4"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("app_signed")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Optional information signed by the Application (not by Tendermint).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tendermint_signed")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Optional information signed by Tendermint.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The header hash of the propsed block that the vote extension refers to.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("validator_address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of the validator that signed the extension")],1),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height of the block  (for sanity check).")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("accept")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("If false, Application is rejecting the vote extension")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("If "),v("code",[e._v("ResponseVerifyVoteExtension.accept")]),e._v(" is "),v("em",[e._v("false")]),e._v(", Tendermint will reject the whole received vote.\nSee the "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_app_requirements_002_draft.html"}},[e._v("Requirements")]),e._v(" section to understand the potential\nliveness implications of this.")],1),e._v(" "),v("li",[e._v("The implementation of "),v("code",[e._v("VerifyVoteExtension")]),e._v(" MUST be deterministic. Moreover, the value of\n"),v("code",[e._v("ResponseVerifyVoteExtension.accept")]),e._v(" MUST "),v("strong",[e._v("exclusively")]),e._v(" depend on the parameters passed in\nthe call to "),v("code",[e._v("RequestVerifyVoteExtension")]),e._v(", and the last committed Application state\n(see "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_app_requirements_002_draft.html"}},[e._v("Requirements")]),e._v(" section).")],1),e._v(" "),v("li",[e._v("Moreover, application implementors SHOULD always set "),v("code",[e._v("ResponseVerifyVoteExtension.accept")]),e._v(" to "),v("em",[e._v("true")]),e._v(",\nunless they "),v("em",[e._v("really")]),e._v(" know what the potential liveness implications of returning "),v("em",[e._v("false")]),e._v(" are.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-it-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-it-4"}},[e._v("#")]),e._v(" When does Tendermint call it?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" is in Tendermint consensus round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", state "),v("em",[e._v("prevote")]),e._v(" ("),v("strong",[e._v("TODO")]),e._v(" discuss: I think I must remove the state\nfrom this condition, but not sure), and "),v("em",[e._v("p")]),e._v(" receives a Precommit message for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(" from "),v("em",[e._v("q")]),e._v(":")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestVerifyVoteExtension")]),e._v(".")]),e._v(" "),v("li",[e._v("The Application returns "),v("em",[e._v("accept")]),e._v(" or "),v("em",[e._v("reject")]),e._v(" via "),v("code",[e._v("ResponseVerifyVoteExtension.accept")]),e._v(".")]),e._v(" "),v("li",[e._v("If the Application returns\n"),v("ul",[v("li",[v("em",[e._v("accept")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint will keep the received vote, together with its corresponding\nvote extension in its internal data structures. It will be used to:\n"),v("ul",[v("li",[e._v("calculate field "),v("em",[e._v("LastCommitHash")]),e._v(" in the header of the block proposed for height "),v("em",[e._v("h + 1")]),e._v("\n(in the rounds where "),v("em",[e._v("p")]),e._v(" will be proposer).")]),e._v(" "),v("li",[e._v("populate "),v("em",[e._v("LastCommitInfo")]),e._v(" in calls to "),v("code",[e._v("RequestPrepareProposal")]),e._v(", "),v("code",[e._v("RequestProcessProposal")]),e._v(",\nand "),v("code",[e._v("RequestFinalizeBlock")]),e._v(" in height "),v("em",[e._v("h + 1")]),e._v(".")])])]),e._v(" "),v("li",[v("em",[e._v("reject")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint will deem the Precommit message invalid and discard it.")])])])]),e._v(" "),v("h3",{attrs:{id:"finalizeblock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#finalizeblock"}},[e._v("#")]),e._v(" FinalizeBlock")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-5"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The block header's hash. Present for convenience (can be derived from the block header).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("header")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#header"}},[e._v("Header")])],1),e._v(" "),v("td",[e._v("The block header.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("txs")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("List of transactions committed as part of the block.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("last_commit_info")]),e._v(" "),v("td",[v("a",{attrs:{href:"#lastcommitinfo"}},[e._v("LastCommitInfo")])]),e._v(" "),v("td",[e._v("Info about the last commit, including the round, and the list of validators and which ones signed the last block.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("byzantine_validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#evidence"}},[e._v("Evidence")])]),e._v(" "),v("td",[e._v("List of evidence of validators that acted maliciously.")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("block_events")]),e._v(" "),v("td",[e._v("repeated "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_basic_concepts_002_draft.html#events"}},[e._v("Event")])],1),e._v(" "),v("td",[e._v("Type & Key-Value events for indexing")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tx_results")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#txresult"}},[e._v("ExecTxResult")])]),e._v(" "),v("td",[e._v("List of structures containing the data resulting from executing the transactions")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("validator_updates")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Changes to validator set (set voting power to 0 to remove).")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_param_updates")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Changes to consensus-critical gas, size, and other parameters.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The Merkle root hash of the application state.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("retain_height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Blocks below this height may be removed. Defaults to "),v("code",[e._v("0")]),e._v(" (retain all).")]),e._v(" "),v("td",[e._v("6")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Contains a newly decided block.")]),e._v(" "),v("li",[e._v("This method is equivalent to the call sequence "),v("code",[e._v("BeginBlock")]),e._v(", ["),v("code",[e._v("DeliverTx")]),e._v("],\n"),v("code",[e._v("EndBlock")]),e._v(", "),v("code",[e._v("Commit")]),e._v(" in the previous version of ABCI.")]),e._v(" "),v("li",[e._v("The header exactly matches the Tendermint header of the proposed block.")]),e._v(" "),v("li",[e._v("The Application can use "),v("code",[e._v("RequestFinalizeBlock.last_commit_info")]),e._v(" and "),v("code",[e._v("RequestFinalizeBlock.byzantine_validators")]),e._v("\nto determine rewards and punishments for the validators.")]),e._v(" "),v("li",[e._v("The application must execute the transactions in full, in the order they appear in "),v("code",[e._v("RequestFinalizeBlock.txs")]),e._v(",\nbefore returning control to Tendermint. Alternatively, it can commit the candidate state corresponding to the same block\npreviously executed via "),v("code",[e._v("PrepareProposal")]),e._v(" or "),v("code",[e._v("ProcessProposal")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.tx_results[i].Code == 0")]),e._v(" only if the "),v("em",[e._v("i")]),e._v("-th transaction is fully valid.")]),e._v(" "),v("li",[e._v("In next-block execution mode, the Application must provide values for "),v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(",\n"),v("code",[e._v("ResponseFinalizeBlock.tx_results")]),e._v(", "),v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(", and\n"),v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" as a result of executing the block.\n"),v("ul",[v("li",[e._v("The values for "),v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(", or\n"),v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" may be empty. In this case, Tendermint will keep\nthe current values.")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(", triggered by block "),v("code",[e._v("H")]),e._v(", affect validation\nfor blocks "),v("code",[e._v("H+1")]),e._v(", "),v("code",[e._v("H+2")]),e._v(", and "),v("code",[e._v("H+3")]),e._v(". Heights following a validator update are affected in the following way:\n- Height "),v("code",[e._v("H+1")]),e._v(": "),v("code",[e._v("NextValidatorsHash")]),e._v(" includes the new "),v("code",[e._v("validator_updates")]),e._v(" value.\n- Height "),v("code",[e._v("H+2")]),e._v(": The validator set change takes effect and "),v("code",[e._v("ValidatorsHash")]),e._v(" is updated.\n- Height "),v("code",[e._v("H+3")]),e._v(": "),v("code",[e._v("last_commit_info")]),e._v(" is changed to include the altered validator set.")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" returned for block "),v("code",[e._v("H")]),e._v(" apply to the consensus\nparams for block "),v("code",[e._v("H+1")]),e._v(". For more information on the consensus parameters,\nsee the "),v("RouterLink",{attrs:{to:"/spec/abci/apps.html#consensus-parameters"}},[e._v("application spec entry on consensus parameters")]),e._v(".")],1)])]),e._v(" "),v("li",[e._v("In same-block execution mode, Tendermint will log an error and ignore values for\n"),v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(", "),v("code",[e._v("ResponseFinalizeBlock.tx_results")]),e._v(", "),v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(",\nand "),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(", as those must have been provided by "),v("code",[e._v("PrepareProposal")]),e._v(".")]),e._v(" "),v("li",[e._v("Application is expected to persist its state at the end of this call, before calling "),v("code",[e._v("ResponseFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(" contains an (optional) Merkle root hash of the application state.")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(" is included\n"),v("ul",[v("li",[e._v("[in next-block execution mode] as the "),v("code",[e._v("Header.AppHash")]),e._v(" in the next block.")]),e._v(" "),v("li",[e._v("[in same-block execution mode] as the "),v("code",[e._v("Header.AppHash")]),e._v(" in the current block. In this case,\n"),v("code",[e._v("PrepareProposal")]),e._v(" is required to fully execute the block and set the App hash before\nreturning the proposed block to Tendermint.")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(" may also be empty or hard-coded, but MUST be\n"),v("strong",[e._v("deterministic")]),e._v(" - it must not be a function of anything that did not come from the parameters\nof "),v("code",[e._v("RequestFinalizeBlock")]),e._v(" and the previous committed state.")])])]),e._v(" "),v("li",[e._v("Later calls to "),v("code",[e._v("Query")]),e._v(" can return proofs about the application state anchored\nin this Merkle root hash.")]),e._v(" "),v("li",[e._v("Use "),v("code",[e._v("ResponseFinalizeBlock.retain_height")]),e._v(" with caution! If all nodes in the network remove historical\nblocks then this data is permanently lost, and no new nodes will be able to join the network and\nbootstrap. Historical blocks may also be required for other purposes, e.g. auditing, replay of\nnon-persisted heights, light client verification, and so on.")]),e._v(" "),v("li",[e._v("Just as "),v("code",[e._v("ProcessProposal")]),e._v(", the implementation of "),v("code",[e._v("FinalizeBlock")]),e._v(" MUST be deterministic, since it is\nmaking the Application's state evolve in the context of state machine replication.")]),e._v(" "),v("li",[e._v("Currently, Tendermint will fill up all fields in "),v("code",[e._v("RequestFinalizeBlock")]),e._v(", even if they were\nalready passed on to the Application via "),v("code",[e._v("RequestPrepareProposal")]),e._v(" or "),v("code",[e._v("RequestProcessProposal")]),e._v(".\nIf the Application is in same-block execution mode, it applies the right candidate state here\n(rather than executing the whole block). In this case the Application disregards all parameters in\n"),v("code",[e._v("RequestFinalizeBlock")]),e._v(" except "),v("code",[e._v("RequestFinalizeBlock.hash")]),e._v(".")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-it-5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-it-5"}},[e._v("#")]),e._v(" When does Tendermint call it?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" is in Tendermint consensus height "),v("em",[e._v("h")]),e._v(", and "),v("em",[e._v("p")]),e._v(" receives")]),e._v(" "),v("ul",[v("li",[e._v("the Proposal message with block "),v("em",[e._v("v")]),e._v(" for a round "),v("em",[e._v("r")]),e._v(", along with all its block parts, from "),v("em",[e._v("q")]),e._v(",\nwhich is the proposer of round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(",")]),e._v(" "),v("li",[v("code",[e._v("Precommit")]),e._v(" messages from "),v("em",[e._v("2f + 1")]),e._v(" validators' voting power for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(",\nprecommitting the same block "),v("em",[e._v("id(v)")]),e._v(",")])]),e._v(" "),v("p",[e._v("then "),v("em",[e._v("p")]),e._v("'s Tendermint decides block "),v("em",[e._v("v")]),e._v(" and finalizes consensus for height "),v("em",[e._v("h")]),e._v(" in the following way")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v("'s Tendermint persists "),v("em",[e._v("v")]),e._v(" as decision for height "),v("em",[e._v("h")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint locks the mempool -- no calls to checkTx on new transactions.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestFinalizeBlock")]),e._v(" with "),v("em",[e._v("id(v)")]),e._v(". The call is synchronous.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Application processes block "),v("em",[e._v("v")]),e._v(", received in a previous call to "),v("code",[e._v("RequestProcessProposal")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Application commits and persists the state resulting from processing the block.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Application calculates and returns the "),v("em",[e._v("AppHash")]),e._v(", along with an array of arrays of bytes representing the output of each of the transactions")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint hashes the array of transaction outputs and stores it in "),v("em",[e._v("ResultHash")])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint persists "),v("em",[e._v("AppHash")]),e._v(" and "),v("em",[e._v("ResultHash")])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint unlocks the mempool -- newly received transactions can now be checked.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s starts consensus for a new height "),v("em",[e._v("h+1")]),e._v(", round 0")])]),e._v(" "),v("h2",{attrs:{id:"data-types-existing-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#data-types-existing-in-abci"}},[e._v("#")]),e._v(" Data Types existing in ABCI")]),e._v(" "),v("p",[e._v("Most of the data structures used in ABCI are shared "),v("RouterLink",{attrs:{to:"/spec/core/data_structures.html"}},[e._v("common data structures")]),e._v(". In certain cases, ABCI uses different data structures which are documented here:")],1),e._v(" "),v("h3",{attrs:{id:"validator"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#validator"}},[e._v("#")]),e._v(" Validator")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of validator")],1),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("power")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Voting power of the validator")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Validator identified by address")]),e._v(" "),v("li",[e._v("Used in RequestBeginBlock as part of VoteInfo")]),e._v(" "),v("li",[e._v("Does not include PubKey to avoid sending potentially large quantum pubkeys\nover the ABCI")])])])]),e._v(" "),v("h3",{attrs:{id:"validatorupdate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#validatorupdate"}},[e._v("#")]),e._v(" ValidatorUpdate")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("pub_key")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#pub_key"}},[e._v("Public Key")])],1),e._v(" "),v("td",[e._v("Public key of the validator")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("power")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Voting power of the validator")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Validator identified by PubKey")]),e._v(" "),v("li",[e._v("Used to tell Tendermint to update the validator set")])])])]),e._v(" "),v("h3",{attrs:{id:"evidence"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#evidence"}},[e._v("#")]),e._v(" Evidence")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("type")]),e._v(" "),v("td",[v("a",{attrs:{href:"#evidencetype"}},[e._v("EvidenceType")])]),e._v(" "),v("td",[e._v("Type of the evidence. An enum of possible evidence's.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[e._v("Validator")])]),e._v(" "),v("td",[e._v("The offending validator")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height when the offense occurred")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Time of the block that was committed at the height that the offense occurred")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("total_voting_power")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Total voting power of the validator set at height "),v("code",[e._v("Height")])]),e._v(" "),v("td",[e._v("5")])])])])])]),e._v(" "),v("h4",{attrs:{id:"evidencetype"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#evidencetype"}},[e._v("#")]),e._v(" EvidenceType")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")])]),e._v(" "),v("p",[e._v("EvidenceType is an enum with the listed fields:")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("UNKNOWN")]),e._v(" "),v("td",[e._v("0")])]),e._v(" "),v("tr",[v("td",[e._v("DUPLICATE_VOTE")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("LIGHT_CLIENT_ATTACK")]),e._v(" "),v("td",[e._v("2")])])])])])]),e._v(" "),v("h3",{attrs:{id:"lastcommitinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#lastcommitinfo"}},[e._v("#")]),e._v(" LastCommitInfo")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("round")]),e._v(" "),v("td",[e._v("int32")]),e._v(" "),v("td",[e._v("Commit round. Reflects the total amount of rounds it took to come to consensus for the current block.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("votes")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#voteinfo"}},[e._v("VoteInfo")])]),e._v(" "),v("td",[e._v("List of validators addresses in the last validator set with their voting power and whether or not they signed a vote.")]),e._v(" "),v("td",[e._v("2")])])])])])]),e._v(" "),v("h3",{attrs:{id:"consensusparams"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#consensusparams"}},[e._v("#")]),e._v(" ConsensusParams")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("block")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#blockparams"}},[e._v("BlockParams")])],1),e._v(" "),v("td",[e._v("Parameters limiting the size of a block and time between consecutive blocks.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("evidence")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#evidenceparams"}},[e._v("EvidenceParams")])],1),e._v(" "),v("td",[e._v("Parameters limiting the validity of evidence of byzantine behaviour.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#validatorparams"}},[e._v("ValidatorParams")])],1),e._v(" "),v("td",[e._v("Parameters limiting the types of public keys validators can use.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("version")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#versionparams"}},[e._v("VersionsParams")])],1),e._v(" "),v("td",[e._v("The ABCI application version.")]),e._v(" "),v("td",[e._v("4")])])])])])]),e._v(" "),v("h3",{attrs:{id:"proofops"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proofops"}},[e._v("#")]),e._v(" ProofOps")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("ops")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#proofop"}},[e._v("ProofOp")])]),e._v(" "),v("td",[e._v("List of chained Merkle proofs, of possibly different types. The Merkle root of one op is the value being proven in the next op. The Merkle root of the final op should equal the ultimate root hash being verified against..")]),e._v(" "),v("td",[e._v("1")])])])])])]),e._v(" "),v("h3",{attrs:{id:"proofop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proofop"}},[e._v("#")]),e._v(" ProofOp")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("type")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Type of Merkle proof and how it's encoded.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("key")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Key in the Merkle tree that this proof is for.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Encoded Merkle proof for the key.")]),e._v(" "),v("td",[e._v("3")])])])])])]),e._v(" "),v("h3",{attrs:{id:"snapshot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#snapshot"}},[e._v("#")]),e._v(" Snapshot")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The height at which the snapshot was taken (after commit).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("format")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("An application-specific snapshot format, allowing applications to version their snapshot data format and make backwards-incompatible changes. Tendermint does not interpret this.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("chunks")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The number of chunks in the snapshot. Must be at least 1 (even if empty).")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("TAn arbitrary snapshot hash. Must be equal only for identical snapshots across nodes. Tendermint does not interpret the hash, it only compares them.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("metadata")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Arbitrary application metadata, for example chunk hashes or other verification data.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Used for state sync snapshots, see the "),v("RouterLink",{attrs:{to:"/spec/p2p/messages/state-sync.html"}},[e._v("state sync section")]),e._v(" for details.")],1),e._v(" "),v("li",[e._v("A snapshot is considered identical across nodes only if "),v("em",[e._v("all")]),e._v(" fields are equal (including\n"),v("code",[e._v("Metadata")]),e._v("). Chunks may be retrieved from all nodes that have the same snapshot.")]),e._v(" "),v("li",[e._v("When sent across the network, a snapshot message can be at most 4 MB.")])])])]),e._v(" "),v("h2",{attrs:{id:"data-types-introduced-or-modified-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#data-types-introduced-or-modified-in-abci"}},[e._v("#")]),e._v(" Data types introduced or modified in ABCI++")]),e._v(" "),v("h3",{attrs:{id:"voteinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#voteinfo"}},[e._v("#")]),e._v(" VoteInfo")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[e._v("Validator")])]),e._v(" "),v("td",[e._v("A validator")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("signed_last_block")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("Indicates whether or not the validator signed the last block")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("tendermint_signed_extension")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Indicates whether or not the validator signed the last block")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("app_signed_extension")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Indicates whether or not the validator signed the last block")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Indicates whether a validator signed the last block, allowing for rewards\nbased on validator availability")]),e._v(" "),v("li",[v("code",[e._v("tendermint_signed_extension")]),e._v(" conveys the part of the validator's vote extension that was signed by Tendermint.")]),e._v(" "),v("li",[v("code",[e._v("app_signed_extension")]),e._v(" conveys the optional "),v("em",[e._v("app_signed")]),e._v(" part of the validator's vote extension.")])])])]),e._v(" "),v("h3",{attrs:{id:"exectxresult"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#exectxresult"}},[e._v("#")]),e._v(" ExecTxResult")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("code")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("Response code.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Result bytes, if any.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("log")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The output of the application's logger. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("info")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Additional information. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("gas_wanted")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas requested for transaction.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("gas_used")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas consumed by transaction.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("tx_events")]),e._v(" "),v("td",[e._v("repeated "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_basic_concepts_002_draft.html#events"}},[e._v("Event")])],1),e._v(" "),v("td",[e._v("Type & Key-Value events for indexing transactions (e.g. by account).")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("codespace")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Namespace for the "),v("code",[e._v("code")]),e._v(".")]),e._v(" "),v("td",[e._v("8")])])])])])]),e._v(" "),v("h3",{attrs:{id:"txaction"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#txaction"}},[e._v("#")]),e._v(" TxAction")]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"ICBlbnVtIFR4QWN0aW9uIHsKICAgIFRYVU5LTk9XTiAgICA9IDA7ICAvLyBVbmtub3duIGFjdGlvbgogICAgVFhVTk1PRElGSUVEID0gMTsgIC8vIFRoZSBBcHBsaWNhdGlvbiBkaWQgbm90IG1vZGlmeSB0aGlzIHRyYW5zYWN0aW9uLiBJZ25vcmUgbmV3X2hhc2hlcyBmaWVsZAogICAgVFhBRERFRCAgICAgID0gMjsgIC8vIFRoZSBBcHBsaWNhdGlvbiBhZGRlZCB0aGlzIHRyYW5zYWN0aW9uLiBJZ25vcmUgbmV3X2hhc2hlcyBmaWVsZAogICAgVFhSRU1PVkVEICAgID0gMzsgIC8vIFRoZSBBcHBsaWNhdGlvbiB3YW50cyB0aGlzIHRyYW5zYWN0aW9uIHJlbW92ZWQgZnJvbSB0aGUgcHJvcG9zYWwgYW5kIHRoZSBtZW1wb29sLgogICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSBuZXdfaGFzaGVzIGZpZWxkIGlmIHRoZSB0cmFuc2FjdGlvbiB3YXMgbW9kaWZpZWQKICB9Cg=="}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is TXUNKNOWN, a problem happened in the Application. Tendermint will ignore this transaction. "),v("strong",[e._v("TODO")]),e._v(" should we panic?")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is TXUNMODIFIED, Tendermint includes the transaction in the proposal. Nothing to do on the mempool. Field "),v("code",[e._v("new_hashes")]),e._v(" is ignored.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is TXADDED, Tendermint includes the transaction in the proposal. The transaction is also added to the mempool and gossipped. Field "),v("code",[e._v("new_hashes")]),e._v(" is ignored.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is TXREMOVED, Tendermint excludes the transaction from the proposal. The transaction is also removed from the mempool if it exists,\nsimilar to "),v("code",[e._v("CheckTx")]),e._v(" returning "),v("em",[e._v("false")]),e._v(". Tendermint can use field "),v("code",[e._v("new_hashes")]),e._v(" to help clients trace transactions that have been modified into other transactions.")])])])]),e._v(" "),v("h3",{attrs:{id:"txrecord"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#txrecord"}},[e._v("#")]),e._v(" TxRecord")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("action")]),e._v(" "),v("td",[v("a",{attrs:{href:"#txaction"}},[e._v("TxAction")])]),e._v(" "),v("td",[e._v("What should Tendermint do with this transaction?")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tx")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Transaction contents")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("new_hashes")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("List of hashes of successor transactions")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("The hashes contained in "),v("code",[e._v("new_hashes")]),e._v(" MUST follow the same algorithm used by Tendermint for hashing transactions\nthat are in the mempool.")]),e._v(" "),v("li",[e._v("As "),v("code",[e._v("new_hashes")]),e._v(" is a list, "),v("code",[e._v("TxRecord")]),e._v(" allows to trace many-to-many modifications. Some examples:\n"),v("ul",[v("li",[e._v("Transaction $t1$ modified into $t2$ is represented with these records\n"),v("ul",[v("li",[e._v('$t2$ "ADDED"')]),e._v(" "),v("li",[e._v('$t1$ "REMOVED"; '),v("code",[e._v("new_hashes")]),e._v(" contains [$id(t2)$]")])])]),e._v(" "),v("li",[e._v("Transaction $t1$ modified into $t2$ and $t3$ is represented with these "),v("code",[e._v("TxRecord")]),e._v(" records\n"),v("ul",[v("li",[e._v('$t2$ "ADDED"')]),e._v(" "),v("li",[e._v('$t3$ "ADDED"')]),e._v(" "),v("li",[e._v('$t1$ "REMOVED"; '),v("code",[e._v("new_hashes")]),e._v(" contains [$id(t2)$, $id(t3)$]")])])]),e._v(" "),v("li",[e._v("Transactions $t1$ and $t2$ aggregated into $t3$ is represented with these "),v("code",[e._v("TxRecord")]),e._v(" records\n"),v("ul",[v("li",[e._v('$t3$ "ADDED"')]),e._v(" "),v("li",[e._v('$t1$ "REMOVED"; '),v("code",[e._v("new_hashes")]),e._v(" contains [$id(t3)$]")]),e._v(" "),v("li",[e._v('$t2$ "REMOVED"; '),v("code",[e._v("new_hashes")]),e._v(" contains [$id(t3)$]")])])]),e._v(" "),v("li",[e._v("Transactions $t1$ and $t2$ combined into $t3$ and $t4$ is represented with these "),v("code",[e._v("TxRecord")]),e._v(" records\n"),v("ul",[v("li",[e._v('$t3$ "ADDED"')]),e._v(" "),v("li",[e._v('$t4$ "ADDED"')]),e._v(" "),v("li",[e._v('$t1$ "REMOVED" and '),v("code",[e._v("new_hashes")]),e._v(" containing [$id(t3)$, $id(t4)$]")]),e._v(" "),v("li",[e._v('$t2$ "REMOVED" and '),v("code",[e._v("new_hashes")]),e._v(" containing [$id(t3)$, $id(t4)$]")])])])])])])])])],1)}),[],!1,null,null,null);t.default=o.exports}}]);